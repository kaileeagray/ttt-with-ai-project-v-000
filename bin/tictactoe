#!/usr/bin/env ruby

require_relative '../config/environment'


# BIN/TICTACTOE
# The requirements of your CLI are as follows, free for you to implement
#however you see fit as we provide no tests against the CLI.
# Greet the user with a message.
# Prompt the user for what kind of game they want to play, 0,1, or 2 player.
# Ask the user for who should go first and be "X".
# Use the input to correctly initialize a Game with the appropriate player
#types and token values.
# When the game is over, the CLI should prompt the user if they would like
#to play again and allow them to choose a new configuration for the game as
# described above. If the user doesn't want to play again, exit the program.
# You can implement this logic within the bin/tictactoe directly or encapsulate
# it within Game via a method like #start and simply evoke that method in the CLI.
# There is no wrong way to implement code that works.
# If you'd like, implement a "wargames" game type. When asked what kind of game
# they want to play or for the number of players, if the user types in "wargames",
# have the computer play itself 100 times and report how many times the game was won.
# This is not a requirement, it would just be fun. A perfect computer AI should
# never be able to win, like in the case of thermonuclear war.
# The rest is up to you and your team. Have fun, implement the spirit of the
# project, meet the requirements as you interpret them, be creative, and don't
# worry, there are no wrong answers with code.

puts "***********  Welcome to Tic Tac Toe! *********** \nWhat type of game would you like to play? \n
      Enter 0 for the computer to play itself. \n
      Enter 1 to play the computer. \n
      Enter 2 to play with a human friend. \n************************************************"

game_type = gets.strip
game_type = game_type.to_i

case game_type
  when 0
    puts "Great! Let's have the computer play Tic-Tac-Toe against itself!"
    player = select_first_token
  when 1
    puts "Great! You can play Tic-Tac-Toe against the computer!"
    player = select_first_token
  when 2
    puts "Great! You can play Tic-Tac-Toe against another human friend!"
    player = select_first_token
end


def select_first_token
  puts "Input \"X\" or \"O\" to select the first player."
  gets.strip
end
